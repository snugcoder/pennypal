"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.error_message import ErrorMessage
from openapi_client.model.prequalification_report_ack import PrequalificationReportAck
from openapi_client.model.prequalification_report_constraints import PrequalificationReportConstraints
from openapi_client.model.voa_report_ack import VOAReportAck
from openapi_client.model.voa_report_constraints import VOAReportConstraints
from openapi_client.model.voa_with_income_report_ack import VOAWithIncomeReportAck
from openapi_client.model.voa_with_income_report_constraints import VOAWithIncomeReportConstraints


class VerifyAssetsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.generate_prequalification_cra_report_endpoint = _Endpoint(
            settings={
                'response_type': (PrequalificationReportAck,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/decisioning/v2/customers/{customerId}/preQualVoa',
                'operation_id': 'generate_prequalification_cra_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'prequalification_report_constraints',
                    'callback_url',
                ],
                'required': [
                    'customer_id',
                    'prequalification_report_constraints',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'prequalification_report_constraints':
                        (PrequalificationReportConstraints,),
                    'callback_url':
                        (str,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'callback_url': 'callbackUrl',
                },
                'location_map': {
                    'customer_id': 'path',
                    'prequalification_report_constraints': 'body',
                    'callback_url': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.generate_prequalification_non_cra_report_endpoint = _Endpoint(
            settings={
                'response_type': (PrequalificationReportAck,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/decisioning/v2/customers/{customerId}/assetSummary',
                'operation_id': 'generate_prequalification_non_cra_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'prequalification_report_constraints',
                    'callback_url',
                ],
                'required': [
                    'customer_id',
                    'prequalification_report_constraints',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'prequalification_report_constraints':
                        (PrequalificationReportConstraints,),
                    'callback_url':
                        (str,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'callback_url': 'callbackUrl',
                },
                'location_map': {
                    'customer_id': 'path',
                    'prequalification_report_constraints': 'body',
                    'callback_url': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.generate_voa_report_endpoint = _Endpoint(
            settings={
                'response_type': (VOAReportAck,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/decisioning/v2/customers/{customerId}/voa',
                'operation_id': 'generate_voa_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'voa_report_constraints',
                    'callback_url',
                ],
                'required': [
                    'customer_id',
                    'voa_report_constraints',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'voa_report_constraints':
                        (VOAReportConstraints,),
                    'callback_url':
                        (str,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'callback_url': 'callbackUrl',
                },
                'location_map': {
                    'customer_id': 'path',
                    'voa_report_constraints': 'body',
                    'callback_url': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.generate_voa_with_income_report_endpoint = _Endpoint(
            settings={
                'response_type': (VOAWithIncomeReportAck,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/decisioning/v2/customers/{customerId}/voaHistory',
                'operation_id': 'generate_voa_with_income_report',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'voa_with_income_report_constraints',
                    'callback_url',
                ],
                'required': [
                    'customer_id',
                    'voa_with_income_report_constraints',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'voa_with_income_report_constraints':
                        (VOAWithIncomeReportConstraints,),
                    'callback_url':
                        (str,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'callback_url': 'callbackUrl',
                },
                'location_map': {
                    'customer_id': 'path',
                    'voa_with_income_report_constraints': 'body',
                    'callback_url': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def generate_prequalification_cra_report(
        self,
        customer_id,
        prequalification_report_constraints,
        **kwargs
    ):
        """Generate Prequalification (CRA) Report  # noqa: E501

        Retrieve all checking, savings, money market, and investment accounts for a consumer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_prequalification_cra_report(customer_id, prequalification_report_constraints, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): A customer ID
            prequalification_report_constraints (PrequalificationReportConstraints):

        Keyword Args:
            callback_url (str): A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PrequalificationReportAck
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['customer_id'] = \
            customer_id
        kwargs['prequalification_report_constraints'] = \
            prequalification_report_constraints
        return self.generate_prequalification_cra_report_endpoint.call_with_http_info(**kwargs)

    def generate_prequalification_non_cra_report(
        self,
        customer_id,
        prequalification_report_constraints,
        **kwargs
    ):
        """Generate Prequalification (Non-CRA) Report  # noqa: E501

        Retrieve all checking, savings, money market, and investment accounts for a customer. The account, owner information, and the number of insufficient funds (NSFs) for checking accounts are also provided.  If no account type of checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_prequalification_non_cra_report(customer_id, prequalification_report_constraints, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): A customer ID
            prequalification_report_constraints (PrequalificationReportConstraints):

        Keyword Args:
            callback_url (str): A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PrequalificationReportAck
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['customer_id'] = \
            customer_id
        kwargs['prequalification_report_constraints'] = \
            prequalification_report_constraints
        return self.generate_prequalification_non_cra_report_endpoint.call_with_http_info(**kwargs)

    def generate_voa_report(
        self,
        customer_id,
        voa_report_constraints,
        **kwargs
    ):
        """Generate VOA Report  # noqa: E501

        Generate a Verification of Assets (VOA) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to twelve months of transaction history for each account and uses this information to generate the VOA report.  This is a premium service. The billing rate is the variable rate for Verification of Assets under the current subscription plan. The billable event is the successful generation of a VOA report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_voa_report(customer_id, voa_report_constraints, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): A customer ID
            voa_report_constraints (VOAReportConstraints):

        Keyword Args:
            callback_url (str): A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            VOAReportAck
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['customer_id'] = \
            customer_id
        kwargs['voa_report_constraints'] = \
            voa_report_constraints
        return self.generate_voa_report_endpoint.call_with_http_info(**kwargs)

    def generate_voa_with_income_report(
        self,
        customer_id,
        voa_with_income_report_constraints,
        **kwargs
    ):
        """Generate VOA With Income Report  # noqa: E501

        Generate a Verification of Assets with Income (VOAI) report for all checking, savings, money market, and investment accounts for the given customer. This service retrieves up to 24 months of transaction history for each account and uses this information to generate the VOAI report. The report includes 1 - 6 months of all debit and credit transactions for asset verification. By default, the history is set to 61 days, however, you can change the transaction history in this section by setting the `fromDate` parameter. The report also includes up to 24 months of income credit transactions (ordered by account and confidence level) regardless of `fromDate` for income verification.  This is a premium service. The billable event is the successful generation of a VOAI report.  Before calling this API, a consumer must be created for the given customer ID (see Consumers APIs).  If no account of type checking, savings, money market, or investment is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_voa_with_income_report(customer_id, voa_with_income_report_constraints, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): A customer ID
            voa_with_income_report_constraints (VOAWithIncomeReportConstraints):

        Keyword Args:
            callback_url (str): A Report Listener URL to receive notifications. The webhook must respond to the Finicity API with a 2xx HTTP status code.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            VOAWithIncomeReportAck
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['customer_id'] = \
            customer_id
        kwargs['voa_with_income_report_constraints'] = \
            voa_with_income_report_constraints
        return self.generate_voa_with_income_report_endpoint.call_with_http_info(**kwargs)

