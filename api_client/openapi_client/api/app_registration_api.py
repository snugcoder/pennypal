"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.app_statuses import AppStatuses
from openapi_client.model.application import Application
from openapi_client.model.customer_accounts import CustomerAccounts
from openapi_client.model.error_message import ErrorMessage
from openapi_client.model.registered_application import RegisteredApplication


class AppRegistrationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_app_registration_status_endpoint = _Endpoint(
            settings={
                'response_type': (AppStatuses,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/aggregation/v2/partners/applications',
                'operation_id': 'get_app_registration_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'pre_app_id',
                    'application_id',
                    'status',
                    'app_name',
                    'submitted_date',
                    'modified_date',
                    'page',
                    'page_size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pre_app_id':
                        (str,),
                    'application_id':
                        (str,),
                    'status':
                        (str,),
                    'app_name':
                        (str,),
                    'submitted_date':
                        (int,),
                    'modified_date':
                        (int,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'pre_app_id': 'preAppId',
                    'application_id': 'applicationId',
                    'status': 'status',
                    'app_name': 'appName',
                    'submitted_date': 'submittedDate',
                    'modified_date': 'modifiedDate',
                    'page': 'page',
                    'page_size': 'pageSize',
                },
                'location_map': {
                    'pre_app_id': 'query',
                    'application_id': 'query',
                    'status': 'query',
                    'app_name': 'query',
                    'submitted_date': 'query',
                    'modified_date': 'query',
                    'page': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.migrate_institution_login_accounts_endpoint = _Endpoint(
            settings={
                'response_type': (CustomerAccounts,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/aggregation/v2/customers/{customerId}/institutionLogins/{institutionLoginId}/migration',
                'operation_id': 'migrate_institution_login_accounts',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'institution_login_id',
                ],
                'required': [
                    'customer_id',
                    'institution_login_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'institution_login_id':
                        (str,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'institution_login_id': 'institutionLoginId',
                },
                'location_map': {
                    'customer_id': 'path',
                    'institution_login_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.modify_app_registration_endpoint = _Endpoint(
            settings={
                'response_type': (RegisteredApplication,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/aggregation/v1/partners/applications/{preAppId}',
                'operation_id': 'modify_app_registration',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'pre_app_id',
                    'application',
                ],
                'required': [
                    'pre_app_id',
                    'application',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pre_app_id':
                        (str,),
                    'application':
                        (Application,),
                },
                'attribute_map': {
                    'pre_app_id': 'preAppId',
                },
                'location_map': {
                    'pre_app_id': 'path',
                    'application': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.register_app_endpoint = _Endpoint(
            settings={
                'response_type': (RegisteredApplication,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/aggregation/v1/partners/applications',
                'operation_id': 'register_app',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'application',
                ],
                'required': [
                    'application',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'application':
                        (Application,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'application': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.set_customer_app_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/aggregation/v1/customers/{customerId}/applications/{applicationId}',
                'operation_id': 'set_customer_app_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'application_id',
                ],
                'required': [
                    'customer_id',
                    'application_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'application_id':
                        (str,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'application_id': 'applicationId',
                },
                'location_map': {
                    'customer_id': 'path',
                    'application_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_app_registration_status(
        self,
        **kwargs
    ):
        """Get App Registration Status  # noqa: E501

        Get the status of your application registration(s).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_app_registration_status(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            pre_app_id (str): The application registration tracking ID. [optional]
            application_id (str): The application ID. [optional]
            status (str): Look up app registration requests by status. [optional]
            app_name (str): Look up app registration requests by app name. [optional]
            submitted_date (int): Look up app registration requests by the date they were submitted. [optional]
            modified_date (int): Look up app registration requests by the date the request was updated. This can be used to determine when a request was updated to \"A\" or \"R\".. [optional]
            page (int): Index of the page of results to return. [optional] if omitted the server will use the default value of 1
            page_size (int): Maximum number of results per page. [optional] if omitted the server will use the default value of 1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AppStatuses
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_app_registration_status_endpoint.call_with_http_info(**kwargs)

    def migrate_institution_login_accounts(
        self,
        customer_id,
        institution_login_id,
        **kwargs
    ):
        """Migrate Institution Login Accounts  # noqa: E501

        The `institutionLoginId` parameter uses Finicity's internal FI mapping to move accounts from the current FI legacy connection to the new OAuth FI connection.  This API returns a list of accounts for the given institution login ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.migrate_institution_login_accounts(customer_id, institution_login_id, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): A customer ID
            institution_login_id (str): The institution login ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CustomerAccounts
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['customer_id'] = \
            customer_id
        kwargs['institution_login_id'] = \
            institution_login_id
        return self.migrate_institution_login_accounts_endpoint.call_with_http_info(**kwargs)

    def modify_app_registration(
        self,
        pre_app_id,
        application,
        **kwargs
    ):
        """Modify App Registration  # noqa: E501

        Update a registered application.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.modify_app_registration(pre_app_id, application, async_req=True)
        >>> result = thread.get()

        Args:
            pre_app_id (str): The application registration tracking ID
            application (Application):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            RegisteredApplication
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['pre_app_id'] = \
            pre_app_id
        kwargs['application'] = \
            application
        return self.modify_app_registration_endpoint.call_with_http_info(**kwargs)

    def register_app(
        self,
        application,
        **kwargs
    ):
        """Register App  # noqa: E501

        Register a new application to access financial institutions using OAuth connections.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.register_app(application, async_req=True)
        >>> result = thread.get()

        Args:
            application (Application):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            RegisteredApplication
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['application'] = \
            application
        return self.register_app_endpoint.call_with_http_info(**kwargs)

    def set_customer_app_id(
        self,
        customer_id,
        application_id,
        **kwargs
    ):
        """Set Customer App ID  # noqa: E501

        If you have multiple applications for a single client, and you want to register their applications to access financial institutions using OAuth connections, then use this API to assign applications to an existing customer.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_customer_app_id(customer_id, application_id, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): A customer ID
            application_id (str): The application ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['customer_id'] = \
            customer_id
        kwargs['application_id'] = \
            application_id
        return self.set_customer_app_id_endpoint.call_with_http_info(**kwargs)

