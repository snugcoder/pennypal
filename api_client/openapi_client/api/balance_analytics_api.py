"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.balance_and_cash_flow_analytics_report_ack import BalanceAndCashFlowAnalyticsReportAck
from openapi_client.model.balance_and_cash_flow_analytics_report_constraints import BalanceAndCashFlowAnalyticsReportConstraints
from openapi_client.model.error_message import ErrorMessage
from openapi_client.model.obb_analytics_report import ObbAnalyticsReport
from openapi_client.model.obb_error_message import ObbErrorMessage


class BalanceAnalyticsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.generate_balance_analytics_endpoint = _Endpoint(
            settings={
                'response_type': (BalanceAndCashFlowAnalyticsReportAck,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/analytics/balance/v1/customer/{customerId}',
                'operation_id': 'generate_balance_analytics',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'balance_and_cash_flow_analytics_report_constraints',
                    'reference_number',
                ],
                'required': [
                    'customer_id',
                    'balance_and_cash_flow_analytics_report_constraints',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'balance_and_cash_flow_analytics_report_constraints':
                        (BalanceAndCashFlowAnalyticsReportConstraints,),
                    'reference_number':
                        (str,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'reference_number': 'reference-number',
                },
                'location_map': {
                    'customer_id': 'path',
                    'balance_and_cash_flow_analytics_report_constraints': 'body',
                    'reference_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.generate_balance_analytics_fcra_endpoint = _Endpoint(
            settings={
                'response_type': (BalanceAndCashFlowAnalyticsReportAck,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/analytics/balance/v1/customer/{customerId}/fcra',
                'operation_id': 'generate_balance_analytics_fcra',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'balance_and_cash_flow_analytics_report_constraints',
                    'reference_number',
                ],
                'required': [
                    'customer_id',
                    'balance_and_cash_flow_analytics_report_constraints',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'balance_and_cash_flow_analytics_report_constraints':
                        (BalanceAndCashFlowAnalyticsReportConstraints,),
                    'reference_number':
                        (str,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'reference_number': 'reference-number',
                },
                'location_map': {
                    'customer_id': 'path',
                    'balance_and_cash_flow_analytics_report_constraints': 'body',
                    'reference_number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_obb_analytics_report_endpoint = _Endpoint(
            settings={
                'response_type': (ObbAnalyticsReport,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/analytics/data/v1/{obb_report_id}',
                'operation_id': 'get_obb_analytics_report',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'obb_report_id',
                ],
                'required': [
                    'obb_report_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'obb_report_id':
                        (str,),
                },
                'attribute_map': {
                    'obb_report_id': 'obb_report_id',
                },
                'location_map': {
                    'obb_report_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/pdf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_obb_analytics_report_fcra_endpoint = _Endpoint(
            settings={
                'response_type': (ObbAnalyticsReport,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/analytics/data/v1/{obb_report_id}/fcra',
                'operation_id': 'get_obb_analytics_report_fcra',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'obb_report_id',
                    'purpose',
                ],
                'required': [
                    'obb_report_id',
                    'purpose',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'obb_report_id':
                        (str,),
                    'purpose':
                        (str,),
                },
                'attribute_map': {
                    'obb_report_id': 'obb_report_id',
                    'purpose': 'purpose',
                },
                'location_map': {
                    'obb_report_id': 'path',
                    'purpose': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/pdf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def generate_balance_analytics(
        self,
        customer_id,
        balance_and_cash_flow_analytics_report_constraints,
        **kwargs
    ):
        """Generate Balance Analytics  # noqa: E501

        Balance Analytics for Business analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Current/available account balances * Minimum/maximum/average account balances over the requested time   period and broken down by month  * Daily ending balance of accounts for each day in the requested time   period  * Propensity of the customer's account balances to increase week over   week  * Number of days in the requested time period ending with a negative   balance   This version of the API is intended for piloting and integration testing your application with the Balance Analytics product. It does not adhere to FCRA requirements, and should not be used for production/lending purposes. See _Generate Balance Analytics - FCRA_ for the FCRA compliant version of this API.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Balance Analytics Report_ (operation: _GetObbAnalyticsReport_).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_balance_analytics(customer_id, balance_and_cash_flow_analytics_report_constraints, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): A customer ID
            balance_and_cash_flow_analytics_report_constraints (BalanceAndCashFlowAnalyticsReportConstraints):

        Keyword Args:
            reference_number (str): Partner-provided reference number to correlate reports.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BalanceAndCashFlowAnalyticsReportAck
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['customer_id'] = \
            customer_id
        kwargs['balance_and_cash_flow_analytics_report_constraints'] = \
            balance_and_cash_flow_analytics_report_constraints
        return self.generate_balance_analytics_endpoint.call_with_http_info(**kwargs)

    def generate_balance_analytics_fcra(
        self,
        customer_id,
        balance_and_cash_flow_analytics_report_constraints,
        **kwargs
    ):
        """Generate Balance Analytics - FCRA  # noqa: E501

        Balance Analytics for Business analyzes bank balances over time to report metrics and identify behavior that may indicate risk.  Calculated metrics include: * Current/available account balances * Minimum/maximum/average account balances over the requested time   period and broken down by month  * Daily ending balance of accounts for each day in the requested time   period  * Propensity of the customer's account balances to increase week over   week  * Number of days in the requested time period ending with a negative   balance   This version of the API is intended for production use. It maintains and enforces all compliance with FCRA rules and requirements.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  A successful call to this API will generate analytics and store a report within Finicity. The report can be retrieved via _Get Balance Analytics Report - FCRA_ (operation: _GetObbAnalyticsReportFCRA_).  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_balance_analytics_fcra(customer_id, balance_and_cash_flow_analytics_report_constraints, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): A customer ID
            balance_and_cash_flow_analytics_report_constraints (BalanceAndCashFlowAnalyticsReportConstraints):

        Keyword Args:
            reference_number (str): Partner-provided reference number to correlate reports.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BalanceAndCashFlowAnalyticsReportAck
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['customer_id'] = \
            customer_id
        kwargs['balance_and_cash_flow_analytics_report_constraints'] = \
            balance_and_cash_flow_analytics_report_constraints
        return self.generate_balance_analytics_fcra_endpoint.call_with_http_info(**kwargs)

    def get_obb_analytics_report(
        self,
        obb_report_id,
        **kwargs
    ):
        """Get OBB Analytics Report  # noqa: E501

        Retrieve the report saved by _Generate Balance Analytics_ or _Generate Cash Flow Analytics_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_obb_analytics_report(obb_report_id, async_req=True)
        >>> result = thread.get()

        Args:
            obb_report_id (str): Report ID generated and returned by OBB products

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ObbAnalyticsReport
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['obb_report_id'] = \
            obb_report_id
        return self.get_obb_analytics_report_endpoint.call_with_http_info(**kwargs)

    def get_obb_analytics_report_fcra(
        self,
        obb_report_id,
        purpose,
        **kwargs
    ):
        """Get OBB Analytics Report - FCRA  # noqa: E501

        Retrieve the report saved by _Generate Balance Analytics - FCRA_ or _Generate Cash Flow Analytics - FCRA_. Requires the report ID generated by the previous call.  Report data can either be retrieved as a JSON document or PDF file.  *Note:* this is a premium service, billable per every successful API call for non-testing customers.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_obb_analytics_report_fcra(obb_report_id, purpose, async_req=True)
        >>> result = thread.get()

        Args:
            obb_report_id (str): Report ID generated and returned by OBB products
            purpose (str): 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ObbAnalyticsReport
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['obb_report_id'] = \
            obb_report_id
        kwargs['purpose'] = \
            purpose
        return self.get_obb_analytics_report_fcra_endpoint.call_with_http_info(**kwargs)

