"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.branding import Branding
    from openapi_client.model.institution_address import InstitutionAddress
    globals()['Branding'] = Branding
    globals()['InstitutionAddress'] = InstitutionAddress


class Institution(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'trans_agg': (bool,),  # noqa: E501
            'ach': (bool,),  # noqa: E501
            'state_agg': (bool,),  # noqa: E501
            'voi': (bool,),  # noqa: E501
            'voa': (bool,),  # noqa: E501
            'aha': (bool,),  # noqa: E501
            'avail_balance': (bool,),  # noqa: E501
            'account_owner': (bool,),  # noqa: E501
            'oauth_enabled': (bool,),  # noqa: E501
            'currency': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'student_loan_data': (bool,),  # noqa: E501
            'loan_payment_details': (bool,),  # noqa: E501
            'account_type_description': (str,),  # noqa: E501
            'phone': (str,),  # noqa: E501
            'url_home_app': (str,),  # noqa: E501
            'url_logon_app': (str,),  # noqa: E501
            'url_forgot_password': (str,),  # noqa: E501
            'url_online_registration': (str,),  # noqa: E501
            '_class': (str,),  # noqa: E501
            'special_text': (str,),  # noqa: E501
            'time_zone': (str,),  # noqa: E501
            'special_instructions': ([str],),  # noqa: E501
            'special_instutions_title': (str,),  # noqa: E501
            'address': (InstitutionAddress,),  # noqa: E501
            'email': (str,),  # noqa: E501
            'new_institution_id': (int,),  # noqa: E501
            'branding': (Branding,),  # noqa: E501
            'oauth_institution_id': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'trans_agg': 'transAgg',  # noqa: E501
        'ach': 'ach',  # noqa: E501
        'state_agg': 'stateAgg',  # noqa: E501
        'voi': 'voi',  # noqa: E501
        'voa': 'voa',  # noqa: E501
        'aha': 'aha',  # noqa: E501
        'avail_balance': 'availBalance',  # noqa: E501
        'account_owner': 'accountOwner',  # noqa: E501
        'oauth_enabled': 'oauthEnabled',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'status': 'status',  # noqa: E501
        'name': 'name',  # noqa: E501
        'student_loan_data': 'studentLoanData',  # noqa: E501
        'loan_payment_details': 'loanPaymentDetails',  # noqa: E501
        'account_type_description': 'accountTypeDescription',  # noqa: E501
        'phone': 'phone',  # noqa: E501
        'url_home_app': 'urlHomeApp',  # noqa: E501
        'url_logon_app': 'urlLogonApp',  # noqa: E501
        'url_forgot_password': 'urlForgotPassword',  # noqa: E501
        'url_online_registration': 'urlOnlineRegistration',  # noqa: E501
        '_class': 'class',  # noqa: E501
        'special_text': 'specialText',  # noqa: E501
        'time_zone': 'timeZone',  # noqa: E501
        'special_instructions': 'specialInstructions',  # noqa: E501
        'special_instutions_title': 'specialInstutionsTitle',  # noqa: E501
        'address': 'address',  # noqa: E501
        'email': 'email',  # noqa: E501
        'new_institution_id': 'newInstitutionId',  # noqa: E501
        'branding': 'branding',  # noqa: E501
        'oauth_institution_id': 'oauthInstitutionId',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, trans_agg, ach, state_agg, voi, voa, aha, avail_balance, account_owner, oauth_enabled, currency, status, *args, **kwargs):  # noqa: E501
        """Institution - a model defined in OpenAPI

        Args:
            id (int): The ID of a financial institution, represented as a number
            trans_agg (bool): \"true\": The institution is certified for the Transaction Aggregation product \"false\": The institution is decertified for the Transaction Aggregation product
            ach (bool): \"true\": The institution is certified for the ACH product \"false\": The institution is decertified for the ACH product
            state_agg (bool): \"true\": The institution is certified for the Statement Aggregation product \"false\": The institution is decertified for the Statement Aggregation product
            voi (bool): \"true\": The institution is certified for the VOI product \"false\": The institution is decertified for the VOI product
            voa (bool): \"true\": The institution is certified for the VOA product \"false\": The institution is decertified for the VOA product
            aha (bool): \"true\": The institution is certified for the Account History Aggregation product \"false\": The institution is decertified for the Account History Aggregation product
            avail_balance (bool): \"true\": The institution is certified for the Account Balance Check (ABC) product \"false\": The institution is decertified for the Account Balance Check (ABC) product
            account_owner (bool): \"true\": The institution is certified for the Account Owner product \"false\": The institution is decertified for the Account Owner product
            oauth_enabled (bool): \"true\": The institution is an OAuth connection  \"false\": The institution isn't an OAuth connection
            currency (str): A currency code
            status (str): Status for the institution: \"online\", \"offline\", \"maintenance\", \"testing\"

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): The name of the institution. [optional]  # noqa: E501
            student_loan_data (bool): \"true\": The institution is certified for the Student Loan Data product  \"false\": The institution is decertified for the Student Loan Data product. [optional]  # noqa: E501
            loan_payment_details (bool): \"true\": The institution is certified for the Loan Payment Detail product  \"false\": The institution is decertified for the Loan Payment Detail product. [optional]  # noqa: E501
            account_type_description (str): Values: Banking, Investments, Credit Cards/Accounts, Workplace Retirement, Mortgages and Loans, Insurance. [optional]  # noqa: E501
            phone (str): A phone number (max length 15).. [optional]  # noqa: E501
            url_home_app (str): The URL of the institution's primary home page. [optional]  # noqa: E501
            url_logon_app (str): The URL of the institution's login page. [optional]  # noqa: E501
            url_forgot_password (str): Institution's forgot password page. [optional]  # noqa: E501
            url_online_registration (str): Institution's signup page. [optional]  # noqa: E501
            _class (str): Institution's class. [optional]  # noqa: E501
            special_text (str): Special instructions given to customers for login. [optional]  # noqa: E501
            time_zone (str): The time zone of the institution.. [optional]  # noqa: E501
            special_instructions ([str]): Instructions given to the customer before they are sent to the institution website to login for OAuth institutions.  Note: this helps the customer to provide the proper permission for data needed for the application.. [optional]  # noqa: E501
            special_instutions_title (str): The title of the special instructions, if one exists or is required.. [optional]  # noqa: E501
            address (InstitutionAddress): [optional]  # noqa: E501
            email (str): An email address. [optional]  # noqa: E501
            new_institution_id (int): The ID of a financial institution, represented as a number. [optional]  # noqa: E501
            branding (Branding): [optional]  # noqa: E501
            oauth_institution_id (int): The ID of a financial institution, represented as a number. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.trans_agg = trans_agg
        self.ach = ach
        self.state_agg = state_agg
        self.voi = voi
        self.voa = voa
        self.aha = aha
        self.avail_balance = avail_balance
        self.account_owner = account_owner
        self.oauth_enabled = oauth_enabled
        self.currency = currency
        self.status = status
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, trans_agg, ach, state_agg, voi, voa, aha, avail_balance, account_owner, oauth_enabled, currency, status, *args, **kwargs):  # noqa: E501
        """Institution - a model defined in OpenAPI

        Args:
            id (int): The ID of a financial institution, represented as a number
            trans_agg (bool): \"true\": The institution is certified for the Transaction Aggregation product \"false\": The institution is decertified for the Transaction Aggregation product
            ach (bool): \"true\": The institution is certified for the ACH product \"false\": The institution is decertified for the ACH product
            state_agg (bool): \"true\": The institution is certified for the Statement Aggregation product \"false\": The institution is decertified for the Statement Aggregation product
            voi (bool): \"true\": The institution is certified for the VOI product \"false\": The institution is decertified for the VOI product
            voa (bool): \"true\": The institution is certified for the VOA product \"false\": The institution is decertified for the VOA product
            aha (bool): \"true\": The institution is certified for the Account History Aggregation product \"false\": The institution is decertified for the Account History Aggregation product
            avail_balance (bool): \"true\": The institution is certified for the Account Balance Check (ABC) product \"false\": The institution is decertified for the Account Balance Check (ABC) product
            account_owner (bool): \"true\": The institution is certified for the Account Owner product \"false\": The institution is decertified for the Account Owner product
            oauth_enabled (bool): \"true\": The institution is an OAuth connection  \"false\": The institution isn't an OAuth connection
            currency (str): A currency code
            status (str): Status for the institution: \"online\", \"offline\", \"maintenance\", \"testing\"

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str): The name of the institution. [optional]  # noqa: E501
            student_loan_data (bool): \"true\": The institution is certified for the Student Loan Data product  \"false\": The institution is decertified for the Student Loan Data product. [optional]  # noqa: E501
            loan_payment_details (bool): \"true\": The institution is certified for the Loan Payment Detail product  \"false\": The institution is decertified for the Loan Payment Detail product. [optional]  # noqa: E501
            account_type_description (str): Values: Banking, Investments, Credit Cards/Accounts, Workplace Retirement, Mortgages and Loans, Insurance. [optional]  # noqa: E501
            phone (str): A phone number (max length 15).. [optional]  # noqa: E501
            url_home_app (str): The URL of the institution's primary home page. [optional]  # noqa: E501
            url_logon_app (str): The URL of the institution's login page. [optional]  # noqa: E501
            url_forgot_password (str): Institution's forgot password page. [optional]  # noqa: E501
            url_online_registration (str): Institution's signup page. [optional]  # noqa: E501
            _class (str): Institution's class. [optional]  # noqa: E501
            special_text (str): Special instructions given to customers for login. [optional]  # noqa: E501
            time_zone (str): The time zone of the institution.. [optional]  # noqa: E501
            special_instructions ([str]): Instructions given to the customer before they are sent to the institution website to login for OAuth institutions.  Note: this helps the customer to provide the proper permission for data needed for the application.. [optional]  # noqa: E501
            special_instutions_title (str): The title of the special instructions, if one exists or is required.. [optional]  # noqa: E501
            address (InstitutionAddress): [optional]  # noqa: E501
            email (str): An email address. [optional]  # noqa: E501
            new_institution_id (int): The ID of a financial institution, represented as a number. [optional]  # noqa: E501
            branding (Branding): [optional]  # noqa: E501
            oauth_institution_id (int): The ID of a financial institution, represented as a number. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.trans_agg = trans_agg
        self.ach = ach
        self.state_agg = state_agg
        self.voi = voi
        self.voa = voa
        self.aha = aha
        self.avail_balance = avail_balance
        self.account_owner = account_owner
        self.oauth_enabled = oauth_enabled
        self.currency = currency
        self.status = status
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
