"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError



class AccountOwnerIdentityInsights(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'is_email_valid': (bool,),  # noqa: E501
            'email_first_seen_days': (float,),  # noqa: E501
            'email_domain_creation_date': (str,),  # noqa: E501
            'email_to_name': (str,),  # noqa: E501
            'ip_risk': (float,),  # noqa: E501
            'ip_risk_score': (float,),  # noqa: E501
            'ip_last_seen_days': (float,),  # noqa: E501
            'ip_geolocation_country_code': (str,),  # noqa: E501
            'ip_geolocation_subdivision': (str,),  # noqa: E501
            'ip_phone_distance': (float,),  # noqa: E501
            'ip_address_distance': (float,),  # noqa: E501
            'is_phone_valid': (bool,),  # noqa: E501
            'phone_line_type': (str,),  # noqa: E501
            'phone_carrier': (str,),  # noqa: E501
            'phone_country_code': (str,),  # noqa: E501
            'phone_last_seen_days': (float,),  # noqa: E501
            'phone_email_first_seen_days': (float,),  # noqa: E501
            'phone_to_name': (str,),  # noqa: E501
            'phone_to_address': (str,),  # noqa: E501
            'address_validity_level': (float,),  # noqa: E501
            'address_to_name': (str,),  # noqa: E501
            'identity_network_score': (float,),  # noqa: E501
            'identity_risk_score': (float,),  # noqa: E501
            'warnings': ([str],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'is_email_valid': 'isEmailValid',  # noqa: E501
        'email_first_seen_days': 'emailFirstSeenDays',  # noqa: E501
        'email_domain_creation_date': 'emailDomainCreationDate',  # noqa: E501
        'email_to_name': 'emailToName',  # noqa: E501
        'ip_risk': 'ipRisk',  # noqa: E501
        'ip_risk_score': 'ipRiskScore',  # noqa: E501
        'ip_last_seen_days': 'ipLastSeenDays',  # noqa: E501
        'ip_geolocation_country_code': 'ipGeolocationCountryCode',  # noqa: E501
        'ip_geolocation_subdivision': 'ipGeolocationSubdivision',  # noqa: E501
        'ip_phone_distance': 'ipPhoneDistance',  # noqa: E501
        'ip_address_distance': 'ipAddressDistance',  # noqa: E501
        'is_phone_valid': 'isPhoneValid',  # noqa: E501
        'phone_line_type': 'phoneLineType',  # noqa: E501
        'phone_carrier': 'phoneCarrier',  # noqa: E501
        'phone_country_code': 'phoneCountryCode',  # noqa: E501
        'phone_last_seen_days': 'phoneLastSeenDays',  # noqa: E501
        'phone_email_first_seen_days': 'phoneEmailFirstSeenDays',  # noqa: E501
        'phone_to_name': 'phoneToName',  # noqa: E501
        'phone_to_address': 'phoneToAddress',  # noqa: E501
        'address_validity_level': 'addressValidityLevel',  # noqa: E501
        'address_to_name': 'addressToName',  # noqa: E501
        'identity_network_score': 'identityNetworkScore',  # noqa: E501
        'identity_risk_score': 'identityRiskScore',  # noqa: E501
        'warnings': 'warnings',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """AccountOwnerIdentityInsights - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            is_email_valid (bool): True if the email address is valid.. [optional]  # noqa: E501
            email_first_seen_days (float): Count of days since the email was first observed in Ekata's Identity Network. If the email has not been observed before, first_seen_days will be 0.. [optional]  # noqa: E501
            email_domain_creation_date (str): Returns a date that the email domain was created.. [optional]  # noqa: E501
            email_to_name (str): The match status between the input name and the queried entity. * not found * match * no-match. [optional]  # noqa: E501
            ip_risk (float): True if the IP address is considered risky, based on multiple IP data points and velocity calculations.. [optional]  # noqa: E501
            ip_risk_score (float): Comprehensive risk score associated with an IP address, with a higher score indicating a riskier IP address. A number between 0 and 1 rounded to three decimal places.. [optional]  # noqa: E501
            ip_last_seen_days (float): Count of days since the IP address was last observed in Ekata's Identity Network. If the IP address has not been observed before, IpLastSeenDays will be 0.. [optional]  # noqa: E501
            ip_geolocation_country_code (str): The ISO-3166 alpha-2 country code associated with the geolocation of the IP address.. [optional]  # noqa: E501
            ip_geolocation_subdivision (str): More granular detail about the IP address location.. [optional]  # noqa: E501
            ip_phone_distance (float): The distance (in miles) between the IP address and the closest physical address associated with the phone number.. [optional]  # noqa: E501
            ip_address_distance (float): The distance (in miles) between the IP address and the physical address.. [optional]  # noqa: E501
            is_phone_valid (bool): True if the phone number is valid.. [optional]  # noqa: E501
            phone_line_type (str): The line type of the phone number. * landline - traditional wired phone line. * fixed-voip - VoIP-based fixed line phones. * mobile - wireless phone line. * voicemail - voicemail-only service. * toll-free - callee pays for call. * premium - caller pays a premium for the call-e.g., 976 area code. * non-fixed-voip - Skype, for example * other - anything that does not match the previous categories.. [optional]  # noqa: E501
            phone_carrier (str): The company that provides voice and/or data services for the phone number. Carriers are returned at the MVNO level.. [optional]  # noqa: E501
            phone_country_code (str): The ISO-3166 alpha-2 country code associated with the phone number.. [optional]  # noqa: E501
            phone_last_seen_days (float): Count of days since the phone was last observed in Ekata's Identity Network. If the phone has not been observed before, `phoneLastSeenDays` will be 0.. [optional]  # noqa: E501
            phone_email_first_seen_days (float): Count of days since the combination of phone and email was first observed in Ekata's Identity Network. If that combination has not been observed before, `phoneEmailFirstSeenDays` will be 0.. [optional]  # noqa: E501
            phone_to_name (str): The match status between the input name and the queried entity.  * not-found  * match  * no-match. [optional]  # noqa: E501
            phone_to_address (str): The match status between the input phone and the queried entity. * match - Phone location matches input address line 1, address line 2, city, state, and postal code.   * postal-match - Phone location postal code matches input address postal code.   * zip4-match - Phone location postal code zip+4 matches input address postal code zip+4.   * city-state-match - Phone location city and state matches input address city and state.  * metro-match - Phone location is in the same metro area as input address.   * country-match - Phone location country matches input address country.   * no-match - Phone location does not match input address.. [optional]  # noqa: E501
            address_validity_level (float): The most granular level to which the address could be validated. Ex. If the address was only valid to the city level (but not to the house level), it would return “valid_to_city”.   * missing_address - An input address was not provided.    * invalid - The input address is not valid.    * valid - The input address is valid.    * valid_to_country - The input address could only be validated to the country level. This means the country of the input address is valid, but the other elements of the input address were unable to be confirmed as valid or invalid.    * valid_to_city - The input address was validated to the city level. This means the country, state, city, and postal code of the input address are valid, but the street, house number, and subpremise of the input address were unable to be confirmed as valid or invalid.    * valid_to_street - The input address was validated to the street level. This means the country, state, city, postal code, and street of the input address are valid, but the house number and subpremise of the input address were unable to be confirmed as valid or invalid.      * valid_to_house_number - The input address was validated to the street and house number level. This means the country, state, city,postal code, street, and house number of the input address are valid, but the subpremise of the input address was unable to be confirmed as valid or invalid.       * valid_to_house_number_missing_apt - The input address was validated to the street and house number level. This means the country, state, city, postal code, street, and house number of the input address are valid, but the subpremise of the input address was missing and thus unable to be confirmed as valid or invalid.. [optional]  # noqa: E501
            address_to_name (str): The match status between the input name and the queried entity. * not-found * match * no-match. [optional]  # noqa: E501
            identity_network_score (float): Comprehensive network score built on behavioral insights such as velocity, popularity, volatility, and age of an attribute, with a higher score indicating a riskier account sign-up. A number between 0 and 1 rounded to three decimal places.. [optional]  # noqa: E501
            identity_risk_score (float): Comprehensive identity risk score with a higher score indicating a riskier account sign-up.. [optional]  # noqa: E501
            warnings ([str]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """AccountOwnerIdentityInsights - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            is_email_valid (bool): True if the email address is valid.. [optional]  # noqa: E501
            email_first_seen_days (float): Count of days since the email was first observed in Ekata's Identity Network. If the email has not been observed before, first_seen_days will be 0.. [optional]  # noqa: E501
            email_domain_creation_date (str): Returns a date that the email domain was created.. [optional]  # noqa: E501
            email_to_name (str): The match status between the input name and the queried entity. * not found * match * no-match. [optional]  # noqa: E501
            ip_risk (float): True if the IP address is considered risky, based on multiple IP data points and velocity calculations.. [optional]  # noqa: E501
            ip_risk_score (float): Comprehensive risk score associated with an IP address, with a higher score indicating a riskier IP address. A number between 0 and 1 rounded to three decimal places.. [optional]  # noqa: E501
            ip_last_seen_days (float): Count of days since the IP address was last observed in Ekata's Identity Network. If the IP address has not been observed before, IpLastSeenDays will be 0.. [optional]  # noqa: E501
            ip_geolocation_country_code (str): The ISO-3166 alpha-2 country code associated with the geolocation of the IP address.. [optional]  # noqa: E501
            ip_geolocation_subdivision (str): More granular detail about the IP address location.. [optional]  # noqa: E501
            ip_phone_distance (float): The distance (in miles) between the IP address and the closest physical address associated with the phone number.. [optional]  # noqa: E501
            ip_address_distance (float): The distance (in miles) between the IP address and the physical address.. [optional]  # noqa: E501
            is_phone_valid (bool): True if the phone number is valid.. [optional]  # noqa: E501
            phone_line_type (str): The line type of the phone number. * landline - traditional wired phone line. * fixed-voip - VoIP-based fixed line phones. * mobile - wireless phone line. * voicemail - voicemail-only service. * toll-free - callee pays for call. * premium - caller pays a premium for the call-e.g., 976 area code. * non-fixed-voip - Skype, for example * other - anything that does not match the previous categories.. [optional]  # noqa: E501
            phone_carrier (str): The company that provides voice and/or data services for the phone number. Carriers are returned at the MVNO level.. [optional]  # noqa: E501
            phone_country_code (str): The ISO-3166 alpha-2 country code associated with the phone number.. [optional]  # noqa: E501
            phone_last_seen_days (float): Count of days since the phone was last observed in Ekata's Identity Network. If the phone has not been observed before, `phoneLastSeenDays` will be 0.. [optional]  # noqa: E501
            phone_email_first_seen_days (float): Count of days since the combination of phone and email was first observed in Ekata's Identity Network. If that combination has not been observed before, `phoneEmailFirstSeenDays` will be 0.. [optional]  # noqa: E501
            phone_to_name (str): The match status between the input name and the queried entity.  * not-found  * match  * no-match. [optional]  # noqa: E501
            phone_to_address (str): The match status between the input phone and the queried entity. * match - Phone location matches input address line 1, address line 2, city, state, and postal code.   * postal-match - Phone location postal code matches input address postal code.   * zip4-match - Phone location postal code zip+4 matches input address postal code zip+4.   * city-state-match - Phone location city and state matches input address city and state.  * metro-match - Phone location is in the same metro area as input address.   * country-match - Phone location country matches input address country.   * no-match - Phone location does not match input address.. [optional]  # noqa: E501
            address_validity_level (float): The most granular level to which the address could be validated. Ex. If the address was only valid to the city level (but not to the house level), it would return “valid_to_city”.   * missing_address - An input address was not provided.    * invalid - The input address is not valid.    * valid - The input address is valid.    * valid_to_country - The input address could only be validated to the country level. This means the country of the input address is valid, but the other elements of the input address were unable to be confirmed as valid or invalid.    * valid_to_city - The input address was validated to the city level. This means the country, state, city, and postal code of the input address are valid, but the street, house number, and subpremise of the input address were unable to be confirmed as valid or invalid.    * valid_to_street - The input address was validated to the street level. This means the country, state, city, postal code, and street of the input address are valid, but the house number and subpremise of the input address were unable to be confirmed as valid or invalid.      * valid_to_house_number - The input address was validated to the street and house number level. This means the country, state, city,postal code, street, and house number of the input address are valid, but the subpremise of the input address was unable to be confirmed as valid or invalid.       * valid_to_house_number_missing_apt - The input address was validated to the street and house number level. This means the country, state, city, postal code, street, and house number of the input address are valid, but the subpremise of the input address was missing and thus unable to be confirmed as valid or invalid.. [optional]  # noqa: E501
            address_to_name (str): The match status between the input name and the queried entity. * not-found * match * no-match. [optional]  # noqa: E501
            identity_network_score (float): Comprehensive network score built on behavioral insights such as velocity, popularity, volatility, and age of an attribute, with a higher score indicating a riskier account sign-up. A number between 0 and 1 rounded to three decimal places.. [optional]  # noqa: E501
            identity_risk_score (float): Comprehensive identity risk score with a higher score indicating a riskier account sign-up.. [optional]  # noqa: E501
            warnings ([str]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
