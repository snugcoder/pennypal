"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.account_details_tx_based import AccountDetailsTxBased
    from openapi_client.model.prequalification_report_asset_summary import PrequalificationReportAssetSummary
    from openapi_client.model.report_account_position import ReportAccountPosition
    from openapi_client.model.report_transaction_new_tx_based import ReportTransactionNewTxBased
    globals()['AccountDetailsTxBased'] = AccountDetailsTxBased
    globals()['PrequalificationReportAssetSummary'] = PrequalificationReportAssetSummary
    globals()['ReportAccountPosition'] = ReportAccountPosition
    globals()['ReportTransactionNewTxBased'] = ReportTransactionNewTxBased


class VOAReportAccount(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'number': (str,),  # noqa: E501
            'owner_name': (str,),  # noqa: E501
            'owner_address': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'available_balance': (float,),  # noqa: E501
            'aggregation_status_code': (int,),  # noqa: E501
            'balance': (float,),  # noqa: E501
            'balance_date': (int,),  # noqa: E501
            'average_monthly_balance': (float,),  # noqa: E501
            'tot_number_insufficient_funds_fee_debit_tx_account': (int,),  # noqa: E501
            'tot_number_insufficient_funds_fee_debit_tx_over2_months_account': (int,),  # noqa: E501
            'tot_number_days_since_most_recent_insufficient_funds_fee_debit_tx_account': (int,),  # noqa: E501
            'transactions': ([ReportTransactionNewTxBased],),  # noqa: E501
            'details': (AccountDetailsTxBased,),  # noqa: E501
            'position': (ReportAccountPosition,),  # noqa: E501
            'asset': (PrequalificationReportAssetSummary,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'number': 'number',  # noqa: E501
        'owner_name': 'ownerName',  # noqa: E501
        'owner_address': 'ownerAddress',  # noqa: E501
        'name': 'name',  # noqa: E501
        'type': 'type',  # noqa: E501
        'available_balance': 'availableBalance',  # noqa: E501
        'aggregation_status_code': 'aggregationStatusCode',  # noqa: E501
        'balance': 'balance',  # noqa: E501
        'balance_date': 'balanceDate',  # noqa: E501
        'average_monthly_balance': 'averageMonthlyBalance',  # noqa: E501
        'tot_number_insufficient_funds_fee_debit_tx_account': 'totNumberInsufficientFundsFeeDebitTxAccount',  # noqa: E501
        'tot_number_insufficient_funds_fee_debit_tx_over2_months_account': 'totNumberInsufficientFundsFeeDebitTxOver2MonthsAccount',  # noqa: E501
        'tot_number_days_since_most_recent_insufficient_funds_fee_debit_tx_account': 'totNumberDaysSinceMostRecentInsufficientFundsFeeDebitTxAccount',  # noqa: E501
        'transactions': 'transactions',  # noqa: E501
        'details': 'details',  # noqa: E501
        'position': 'position',  # noqa: E501
        'asset': 'asset',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """VOAReportAccount - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): The ID of the account. [optional]  # noqa: E501
            number (str): The account number from the institution (all digits except the last four are obfuscated). [optional]  # noqa: E501
            owner_name (str): The name(s) of the account owner(s). This field is optional. If no owner information is available, this field will not appear in the report.. [optional]  # noqa: E501
            owner_address (str): The mailing address of the account owner(s). This field is optional. If no owner information is available, this field will not appear in the report.. [optional]  # noqa: E501
            name (str): The account name from the institution. [optional]  # noqa: E501
            type (str): One of the values from account types. [optional]  # noqa: E501
            available_balance (float): The available balance for the account. [optional]  # noqa: E501
            aggregation_status_code (int): The status of the most recent aggregation attempt. [optional]  # noqa: E501
            balance (float): The cleared balance of the account as-of balanceDate. [optional]  # noqa: E501
            balance_date (int): A timestamp showing when the balance was captured. [optional]  # noqa: E501
            average_monthly_balance (float): The average monthly balance of this account. [optional]  # noqa: E501
            tot_number_insufficient_funds_fee_debit_tx_account (int): The count for the total number of insufficient funds transactions, based on the `fromDate` of the report.. [optional]  # noqa: E501
            tot_number_insufficient_funds_fee_debit_tx_over2_months_account (int): The count for the total number of insufficient funds transactions for the last two months, based on the `fromDate` of the report.. [optional]  # noqa: E501
            tot_number_days_since_most_recent_insufficient_funds_fee_debit_tx_account (int): The number of days since the most recent insufficient funds transaction, based on the `fromDate` of the report.. [optional]  # noqa: E501
            transactions ([ReportTransactionNewTxBased]): a list of transaction records. [optional]  # noqa: E501
            details (AccountDetailsTxBased): [optional]  # noqa: E501
            position (ReportAccountPosition): [optional]  # noqa: E501
            asset (PrequalificationReportAssetSummary): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """VOAReportAccount - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (int): The ID of the account. [optional]  # noqa: E501
            number (str): The account number from the institution (all digits except the last four are obfuscated). [optional]  # noqa: E501
            owner_name (str): The name(s) of the account owner(s). This field is optional. If no owner information is available, this field will not appear in the report.. [optional]  # noqa: E501
            owner_address (str): The mailing address of the account owner(s). This field is optional. If no owner information is available, this field will not appear in the report.. [optional]  # noqa: E501
            name (str): The account name from the institution. [optional]  # noqa: E501
            type (str): One of the values from account types. [optional]  # noqa: E501
            available_balance (float): The available balance for the account. [optional]  # noqa: E501
            aggregation_status_code (int): The status of the most recent aggregation attempt. [optional]  # noqa: E501
            balance (float): The cleared balance of the account as-of balanceDate. [optional]  # noqa: E501
            balance_date (int): A timestamp showing when the balance was captured. [optional]  # noqa: E501
            average_monthly_balance (float): The average monthly balance of this account. [optional]  # noqa: E501
            tot_number_insufficient_funds_fee_debit_tx_account (int): The count for the total number of insufficient funds transactions, based on the `fromDate` of the report.. [optional]  # noqa: E501
            tot_number_insufficient_funds_fee_debit_tx_over2_months_account (int): The count for the total number of insufficient funds transactions for the last two months, based on the `fromDate` of the report.. [optional]  # noqa: E501
            tot_number_days_since_most_recent_insufficient_funds_fee_debit_tx_account (int): The number of days since the most recent insufficient funds transaction, based on the `fromDate` of the report.. [optional]  # noqa: E501
            transactions ([ReportTransactionNewTxBased]): a list of transaction records. [optional]  # noqa: E501
            details (AccountDetailsTxBased): [optional]  # noqa: E501
            position (ReportAccountPosition): [optional]  # noqa: E501
            asset (PrequalificationReportAssetSummary): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
