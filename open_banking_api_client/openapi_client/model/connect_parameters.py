"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.consumer_info import ConsumerInfo
    from openapi_client.model.report_custom_fields import ReportCustomFields
    globals()['ConsumerInfo'] = ConsumerInfo
    globals()['ReportCustomFields'] = ReportCustomFields


class ConnectParameters(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'partner_id': (str,),  # noqa: E501
            'customer_id': (str,),  # noqa: E501
            'language': (str,),  # noqa: E501
            'consumer_id': (str,),  # noqa: E501
            'redirect_uri': (str,),  # noqa: E501
            'webhook': (str,),  # noqa: E501
            'webhook_content_type': (str,),  # noqa: E501
            'webhook_data': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'webhook_headers': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'optional_consumer_info': (ConsumerInfo,),  # noqa: E501
            'single_use_url': (bool,),  # noqa: E501
            'experience': (str,),  # noqa: E501
            'institution_settings': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),  # noqa: E501
            'from_date': (int,),  # noqa: E501
            'report_custom_fields': (ReportCustomFields,),  # noqa: E501
            'is_web_view': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'partner_id': 'partnerId',  # noqa: E501
        'customer_id': 'customerId',  # noqa: E501
        'language': 'language',  # noqa: E501
        'consumer_id': 'consumerId',  # noqa: E501
        'redirect_uri': 'redirectUri',  # noqa: E501
        'webhook': 'webhook',  # noqa: E501
        'webhook_content_type': 'webhookContentType',  # noqa: E501
        'webhook_data': 'webhookData',  # noqa: E501
        'webhook_headers': 'webhookHeaders',  # noqa: E501
        'optional_consumer_info': 'optionalConsumerInfo',  # noqa: E501
        'single_use_url': 'singleUseUrl',  # noqa: E501
        'experience': 'experience',  # noqa: E501
        'institution_settings': 'institutionSettings',  # noqa: E501
        'from_date': 'fromDate',  # noqa: E501
        'report_custom_fields': 'reportCustomFields',  # noqa: E501
        'is_web_view': 'isWebView',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, partner_id, customer_id, *args, **kwargs):  # noqa: E501
        """ConnectParameters - a model defined in OpenAPI

        Args:
            partner_id (str): Your Partner ID displayed in the [Developer Dashboard](https://developer.finicity.com/admin)
            customer_id (str): A customer ID. See Add Customer API for how to create a customer ID.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            language (str): Generate a translated Connect URL link.   Supported languages:  * English (default) * Spanish (United States): `es` * French (Canada): `fr` or `fr-CA` . [optional]  # noqa: E501
            consumer_id (str): A consumer ID. See Create Consumer API for how to create a consumer ID.. [optional]  # noqa: E501
            redirect_uri (str): The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe).. [optional]  # noqa: E501
            webhook (str): The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details.. [optional]  # noqa: E501
            webhook_content_type (str): The content type the webhook events will be sent in. Supported types: \"application/json\" and \"application/xml\".. [optional] if omitted the server will use the default value of "application/json"  # noqa: E501
            webhook_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).. [optional]  # noqa: E501
            webhook_headers ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).. [optional]  # noqa: E501
            optional_consumer_info (ConsumerInfo): [optional]  # noqa: E501
            single_use_url (bool): \"true\": The URL link expires after a Connect session successfully completes.  Note: when the `singleUseUrl` and the `experience` parameters are passed in the same call, the `singleUseUrl` value overrides the `singleUseUrl` value configured in the `experience` parameter.. [optional]  # noqa: E501
            experience (str): The `experience` field allows you to customize: * Brand: color and logo * Icon: displayed on the \"Share your data\" page  * Popular institutions: displayed on the Bank Search page  * Report: the credit decisioning report to send when Connect completes.  * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company when you migrate to Connect 2.0. For each additional experience you create thereafter, they'll give you a unique ID. See [Generate Connect URL](https://developer.mastercard.com/open-banking-us/documentation/connect/generate-2-connect-url-apis/).  Experience values options:  * \"default\": your default experience (must be defined)  * GUID: the code for a different experience * Not defined: If you don't pass the experience parameter, then Connect's out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run.. [optional]  # noqa: E501
            institution_settings ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Advanced options for configuration of which institutions to display in. See [Institution Settings](https://developer.mastercard.com/open-banking-us/documentation/connect/connect-institutions-settings/).. [optional]  # noqa: E501
            from_date (int): The `fromDate` parameter is used when experiences are associated with a credit decisioning report and any other reports with transaction data. The value is in epoch time and must be 10 digits. Example: 1494449017. If it's greater than 10 digits, then the `fromDate` is set to the credit decisioning report's default `fromDate`.  For an experience that generates multiple reports, the `fromDate` gets passed to the reports that support it.  However, Connect doesn't pass this parameter to the following reports: * Pay Statement Extraction Report  * VOIE - Paystub (with TXVerify) Report  * Statement Report  * Verification of Income Report  * VOIE - Payroll Report   Note: this field isn't used if you're only collecting transaction data without a report.. [optional]  # noqa: E501
            report_custom_fields (ReportCustomFields): [optional]  # noqa: E501
            is_web_view (bool): \"true\": Indicates that the Connect Session will be displayed within a WebView. Note: when the `isWebView` parameter is `true` the `redirectUri` parameter is required.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.partner_id = partner_id
        self.customer_id = customer_id
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, partner_id, customer_id, *args, **kwargs):  # noqa: E501
        """ConnectParameters - a model defined in OpenAPI

        Args:
            partner_id (str): Your Partner ID displayed in the [Developer Dashboard](https://developer.finicity.com/admin)
            customer_id (str): A customer ID. See Add Customer API for how to create a customer ID.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            language (str): Generate a translated Connect URL link.   Supported languages:  * English (default) * Spanish (United States): `es` * French (Canada): `fr` or `fr-CA` . [optional]  # noqa: E501
            consumer_id (str): A consumer ID. See Create Consumer API for how to create a consumer ID.. [optional]  # noqa: E501
            redirect_uri (str): The URL that customers will be redirected to after completing Finicity Connect. Required unless Connect is embedded inside our application (iframe).. [optional]  # noqa: E501
            webhook (str): The publicly available URL you want to be notified with events as the user progresses through the application. See [Connect Webhook Event](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-connect/) for event details.. [optional]  # noqa: E501
            webhook_content_type (str): The content type the webhook events will be sent in. Supported types: \"application/json\" and \"application/xml\".. [optional] if omitted the server will use the default value of "application/json"  # noqa: E501
            webhook_data ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Allows additional identifiable information to be inserted into the payload of connect webhook events. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).. [optional]  # noqa: E501
            webhook_headers ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Allows additional identifiable information to be included as headers of connect webhook event. See: [Custom Webhooks](https://developer.mastercard.com/open-banking-us/documentation/webhooks/webhooks-custom/).. [optional]  # noqa: E501
            optional_consumer_info (ConsumerInfo): [optional]  # noqa: E501
            single_use_url (bool): \"true\": The URL link expires after a Connect session successfully completes.  Note: when the `singleUseUrl` and the `experience` parameters are passed in the same call, the `singleUseUrl` value overrides the `singleUseUrl` value configured in the `experience` parameter.. [optional]  # noqa: E501
            experience (str): The `experience` field allows you to customize: * Brand: color and logo * Icon: displayed on the \"Share your data\" page  * Popular institutions: displayed on the Bank Search page  * Report: the credit decisioning report to send when Connect completes.  * MVS modules: financial, payroll, paystub  Note: the Finicity sales engineers (SE) help you set up a default experience for your company when you migrate to Connect 2.0. For each additional experience you create thereafter, they'll give you a unique ID. See [Generate Connect URL](https://developer.mastercard.com/open-banking-us/documentation/connect/generate-2-connect-url-apis/).  Experience values options:  * \"default\": your default experience (must be defined)  * GUID: the code for a different experience * Not defined: If you don't pass the experience parameter, then Connect's out of the box default experience (add accounts but no branding) is used, and the MVS modules will not run.. [optional]  # noqa: E501
            institution_settings ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Advanced options for configuration of which institutions to display in. See [Institution Settings](https://developer.mastercard.com/open-banking-us/documentation/connect/connect-institutions-settings/).. [optional]  # noqa: E501
            from_date (int): The `fromDate` parameter is used when experiences are associated with a credit decisioning report and any other reports with transaction data. The value is in epoch time and must be 10 digits. Example: 1494449017. If it's greater than 10 digits, then the `fromDate` is set to the credit decisioning report's default `fromDate`.  For an experience that generates multiple reports, the `fromDate` gets passed to the reports that support it.  However, Connect doesn't pass this parameter to the following reports: * Pay Statement Extraction Report  * VOIE - Paystub (with TXVerify) Report  * Statement Report  * Verification of Income Report  * VOIE - Payroll Report   Note: this field isn't used if you're only collecting transaction data without a report.. [optional]  # noqa: E501
            report_custom_fields (ReportCustomFields): [optional]  # noqa: E501
            is_web_view (bool): \"true\": Indicates that the Connect Session will be displayed within a WebView. Note: when the `isWebView` parameter is `true` the `redirectUri` parameter is required.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.partner_id = partner_id
        self.customer_id = customer_id
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
