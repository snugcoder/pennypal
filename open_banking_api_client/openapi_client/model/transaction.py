"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.categorization import Categorization
    globals()['Categorization'] = Categorization


class Transaction(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (int,),  # noqa: E501
            'amount': (float,),  # noqa: E501
            'account_id': (int,),  # noqa: E501
            'customer_id': (int,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'created_date': (int,),  # noqa: E501
            'memo': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'transaction_date': (int,),  # noqa: E501
            'posted_date': (int,),  # noqa: E501
            'first_effective_date': (int,),  # noqa: E501
            'effective_date': (int,),  # noqa: E501
            'option_expire_date': (int,),  # noqa: E501
            'check_num': (int,),  # noqa: E501
            'escrow_amount': (float,),  # noqa: E501
            'fee_amount': (float,),  # noqa: E501
            'suspense_amount': (float,),  # noqa: E501
            'interest_amount': (float,),  # noqa: E501
            'principal_amount': (float,),  # noqa: E501
            'option_strike_price': (float,),  # noqa: E501
            'unit_quantity': (int,),  # noqa: E501
            'unit_price': (float,),  # noqa: E501
            'categorization': (Categorization,),  # noqa: E501
            'running_balance_amount': (float,),  # noqa: E501
            'subaccount_security_type': (str,),  # noqa: E501
            'commission_amount': (int,),  # noqa: E501
            'ticker': (str,),  # noqa: E501
            'investment_transaction_type': (str,),  # noqa: E501
            'taxes_amount': (int,),  # noqa: E501
            'currency_symbol': (str,),  # noqa: E501
            'income_type': (str,),  # noqa: E501
            'split_denominator': (float,),  # noqa: E501
            'split_numerator': (float,),  # noqa: E501
            'shares_per_contract': (float,),  # noqa: E501
            'sub_account_fund': (str,),  # noqa: E501
            'security_id': (str,),  # noqa: E501
            'security_id_type': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'amount': 'amount',  # noqa: E501
        'account_id': 'accountId',  # noqa: E501
        'customer_id': 'customerId',  # noqa: E501
        'status': 'status',  # noqa: E501
        'description': 'description',  # noqa: E501
        'created_date': 'createdDate',  # noqa: E501
        'memo': 'memo',  # noqa: E501
        'type': 'type',  # noqa: E501
        'transaction_date': 'transactionDate',  # noqa: E501
        'posted_date': 'postedDate',  # noqa: E501
        'first_effective_date': 'firstEffectiveDate',  # noqa: E501
        'effective_date': 'effectiveDate',  # noqa: E501
        'option_expire_date': 'optionExpireDate',  # noqa: E501
        'check_num': 'checkNum',  # noqa: E501
        'escrow_amount': 'escrowAmount',  # noqa: E501
        'fee_amount': 'feeAmount',  # noqa: E501
        'suspense_amount': 'suspenseAmount',  # noqa: E501
        'interest_amount': 'interestAmount',  # noqa: E501
        'principal_amount': 'principalAmount',  # noqa: E501
        'option_strike_price': 'optionStrikePrice',  # noqa: E501
        'unit_quantity': 'unitQuantity',  # noqa: E501
        'unit_price': 'unitPrice',  # noqa: E501
        'categorization': 'categorization',  # noqa: E501
        'running_balance_amount': 'runningBalanceAmount',  # noqa: E501
        'subaccount_security_type': 'subaccountSecurityType',  # noqa: E501
        'commission_amount': 'commissionAmount',  # noqa: E501
        'ticker': 'ticker',  # noqa: E501
        'investment_transaction_type': 'investmentTransactionType',  # noqa: E501
        'taxes_amount': 'taxesAmount',  # noqa: E501
        'currency_symbol': 'currencySymbol',  # noqa: E501
        'income_type': 'incomeType',  # noqa: E501
        'split_denominator': 'splitDenominator',  # noqa: E501
        'split_numerator': 'splitNumerator',  # noqa: E501
        'shares_per_contract': 'sharesPerContract',  # noqa: E501
        'sub_account_fund': 'subAccountFund',  # noqa: E501
        'security_id': 'securityId',  # noqa: E501
        'security_id_type': 'securityIdType',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, amount, account_id, customer_id, status, description, created_date, *args, **kwargs):  # noqa: E501
        """Transaction - a model defined in OpenAPI

        Args:
            id (int): A transaction ID
            amount (float): The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.
            account_id (int): An account ID represented as a number
            customer_id (int): A customer ID represented as a number. See Add Customer API for how to create a customer ID.
            status (str): One of \"active\", \"pending\", or \"shadow\" (see [Transaction Status](https://developer.mastercard.com/open-banking-us/documentation/products/manage/transaction-data/#transaction-status))
            description (str): The description value is from the financial institution (FI), often known as the payee. The value \"No description provided by institution\" is returned when the FI doesn't provide one
            created_date (int): A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was added to our platform. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            memo (str): The institution must provide either a description, a memo, or both. We recommended concatenating the two fields into a single value.. [optional]  # noqa: E501
            type (str): If provided by the institution, the following values may be returned in the field of a record: * \"atm\"  * \"cash\"  * \"check\"  * \"credit\"  * \"debit\"  * \"deposit\"  * \"directDebit\"  * \"directDeposit\"  * \"dividend\"  * \"fee\"  * \"interest\"  * \"other\"  * \"payment\"  * \"pointOfSale\"  * \"repeatPayment\"  * \"serviceCharge\"  * \"transfer\". [optional]  # noqa: E501
            transaction_date (int): A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it occurred. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            posted_date (int): A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was posted or cleared by the institution. This value isn't required for student loan transaction data. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            first_effective_date (int): A date in Unix epoch time (in seconds). Represents the first timestamp of the transaction recorded in the `effectiveDate` field. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            effective_date (int): A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it became effective on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            option_expire_date (int): A date in Unix epoch time (in seconds). Represents the timestamp of the transaction expiration date when it became expires on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            check_num (int): The check number of the transaction. [optional]  # noqa: E501
            escrow_amount (float): The portion of the transaction allocated to escrow. [optional]  # noqa: E501
            fee_amount (float): The portion of the overall transaction amount applied to fees. [optional]  # noqa: E501
            suspense_amount (float): Temporarily hold funds if you overpay or underpay your monthly payment. [optional]  # noqa: E501
            interest_amount (float): The portion of the transaction allocated to interest. [optional]  # noqa: E501
            principal_amount (float): The portion of the transaction allocated to principal. [optional]  # noqa: E501
            option_strike_price (float): The strike price of the option contract. [optional]  # noqa: E501
            unit_quantity (int): The number of units (individual shares) in the transaction. [optional]  # noqa: E501
            unit_price (float): Share price for the investment unit: stocks, mutual funds, ETFs. [optional]  # noqa: E501
            categorization (Categorization): [optional]  # noqa: E501
            running_balance_amount (float): The ending balance after the transaction was posted. [optional]  # noqa: E501
            subaccount_security_type (str): The type of sub account the funds came from. [optional]  # noqa: E501
            commission_amount (int): Transaction commission. [optional]  # noqa: E501
            ticker (str): Ticker symbol for the investment related to the transaction. [optional]  # noqa: E501
            investment_transaction_type (str): Keywords in the `description` and `memo` fields were used to translate investment transactions into these types.  Possible values:  * \"cancel\"  * \"purchaseToClose\"  * \"purchaseToCover\"  * \"contribution\"  * \"optionExercise\"  * \"optionExpiration\"  * \"fee\"  * \"soldToClose\"  * \"soldToOpen\"  * \"split\"  * \"transfer\"  * \"returnOfCapital\"  * \"income\"  * \"purchased\"  * \"sold\"  * \"dividendreInvest\"  * \"tax\"  * \"dividend\"  * \"reinvestOfIncome\"  * \"interest\"  * \"deposit\"  * \"otherInfo\". [optional]  # noqa: E501
            taxes_amount (int): Taxes applicable to the investment trade. [optional]  # noqa: E501
            currency_symbol (str): If the foreign amount value is present then this is the currency code of that foreign amount. [optional]  # noqa: E501
            income_type (str): Capital gains applied in short, long, or miscellaneous terms for tax purposes. [optional]  # noqa: E501
            split_denominator (float): Denominator of the stock split for the transaction. [optional]  # noqa: E501
            split_numerator (float): Numerator of the stock split for the transaction. [optional]  # noqa: E501
            shares_per_contract (float): Shares per contract of the underlying stock option. [optional]  # noqa: E501
            sub_account_fund (str): The sub account where the funds came from. [optional]  # noqa: E501
            security_id (str): The security ID of the transaction. [optional]  # noqa: E501
            security_id_type (str): The security type. This field is related to the `securityId` field. Possible values: * \"CUSIP\"  * \"ISIN\"  * \"SEDOL\"  * \"SICC\"  * \"VALOR\"  * \"WKN\". [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.amount = amount
        self.account_id = account_id
        self.customer_id = customer_id
        self.status = status
        self.description = description
        self.created_date = created_date
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, amount, account_id, customer_id, status, description, created_date, *args, **kwargs):  # noqa: E501
        """Transaction - a model defined in OpenAPI

        Args:
            id (int): A transaction ID
            amount (float): The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.
            account_id (int): An account ID represented as a number
            customer_id (int): A customer ID represented as a number. See Add Customer API for how to create a customer ID.
            status (str): One of \"active\", \"pending\", or \"shadow\" (see [Transaction Status](https://developer.mastercard.com/open-banking-us/documentation/products/manage/transaction-data/#transaction-status))
            description (str): The description value is from the financial institution (FI), often known as the payee. The value \"No description provided by institution\" is returned when the FI doesn't provide one
            created_date (int): A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was added to our platform. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            memo (str): The institution must provide either a description, a memo, or both. We recommended concatenating the two fields into a single value.. [optional]  # noqa: E501
            type (str): If provided by the institution, the following values may be returned in the field of a record: * \"atm\"  * \"cash\"  * \"check\"  * \"credit\"  * \"debit\"  * \"deposit\"  * \"directDebit\"  * \"directDeposit\"  * \"dividend\"  * \"fee\"  * \"interest\"  * \"other\"  * \"payment\"  * \"pointOfSale\"  * \"repeatPayment\"  * \"serviceCharge\"  * \"transfer\". [optional]  # noqa: E501
            transaction_date (int): A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it occurred. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            posted_date (int): A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was posted or cleared by the institution. This value isn't required for student loan transaction data. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            first_effective_date (int): A date in Unix epoch time (in seconds). Represents the first timestamp of the transaction recorded in the `effectiveDate` field. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            effective_date (int): A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it became effective on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            option_expire_date (int): A date in Unix epoch time (in seconds). Represents the timestamp of the transaction expiration date when it became expires on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            check_num (int): The check number of the transaction. [optional]  # noqa: E501
            escrow_amount (float): The portion of the transaction allocated to escrow. [optional]  # noqa: E501
            fee_amount (float): The portion of the overall transaction amount applied to fees. [optional]  # noqa: E501
            suspense_amount (float): Temporarily hold funds if you overpay or underpay your monthly payment. [optional]  # noqa: E501
            interest_amount (float): The portion of the transaction allocated to interest. [optional]  # noqa: E501
            principal_amount (float): The portion of the transaction allocated to principal. [optional]  # noqa: E501
            option_strike_price (float): The strike price of the option contract. [optional]  # noqa: E501
            unit_quantity (int): The number of units (individual shares) in the transaction. [optional]  # noqa: E501
            unit_price (float): Share price for the investment unit: stocks, mutual funds, ETFs. [optional]  # noqa: E501
            categorization (Categorization): [optional]  # noqa: E501
            running_balance_amount (float): The ending balance after the transaction was posted. [optional]  # noqa: E501
            subaccount_security_type (str): The type of sub account the funds came from. [optional]  # noqa: E501
            commission_amount (int): Transaction commission. [optional]  # noqa: E501
            ticker (str): Ticker symbol for the investment related to the transaction. [optional]  # noqa: E501
            investment_transaction_type (str): Keywords in the `description` and `memo` fields were used to translate investment transactions into these types.  Possible values:  * \"cancel\"  * \"purchaseToClose\"  * \"purchaseToCover\"  * \"contribution\"  * \"optionExercise\"  * \"optionExpiration\"  * \"fee\"  * \"soldToClose\"  * \"soldToOpen\"  * \"split\"  * \"transfer\"  * \"returnOfCapital\"  * \"income\"  * \"purchased\"  * \"sold\"  * \"dividendreInvest\"  * \"tax\"  * \"dividend\"  * \"reinvestOfIncome\"  * \"interest\"  * \"deposit\"  * \"otherInfo\". [optional]  # noqa: E501
            taxes_amount (int): Taxes applicable to the investment trade. [optional]  # noqa: E501
            currency_symbol (str): If the foreign amount value is present then this is the currency code of that foreign amount. [optional]  # noqa: E501
            income_type (str): Capital gains applied in short, long, or miscellaneous terms for tax purposes. [optional]  # noqa: E501
            split_denominator (float): Denominator of the stock split for the transaction. [optional]  # noqa: E501
            split_numerator (float): Numerator of the stock split for the transaction. [optional]  # noqa: E501
            shares_per_contract (float): Shares per contract of the underlying stock option. [optional]  # noqa: E501
            sub_account_fund (str): The sub account where the funds came from. [optional]  # noqa: E501
            security_id (str): The security ID of the transaction. [optional]  # noqa: E501
            security_id_type (str): The security type. This field is related to the `securityId` field. Possible values: * \"CUSIP\"  * \"ISIN\"  * \"SEDOL\"  * \"SICC\"  * \"VALOR\"  * \"WKN\". [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.amount = amount
        self.account_id = account_id
        self.customer_id = customer_id
        self.status = status
        self.description = description
        self.created_date = created_date
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
