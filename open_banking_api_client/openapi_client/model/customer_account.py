"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.customer_account_detail import CustomerAccountDetail
    from openapi_client.model.customer_account_position import CustomerAccountPosition
    globals()['CustomerAccountDetail'] = CustomerAccountDetail
    globals()['CustomerAccountPosition'] = CustomerAccountPosition


class CustomerAccount(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'number': (str,),  # noqa: E501
            'account_number_display': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'customer_id': (str,),  # noqa: E501
            'institution_id': (str,),  # noqa: E501
            'created_date': (int,),  # noqa: E501
            'currency': (str,),  # noqa: E501
            'institution_login_id': (int,),  # noqa: E501
            'real_account_number_last4': (str,),  # noqa: E501
            'balance': (float,),  # noqa: E501
            'aggregation_status_code': (int,),  # noqa: E501
            'balance_date': (int,),  # noqa: E501
            'aggregation_success_date': (int,),  # noqa: E501
            'aggregation_attempt_date': (int,),  # noqa: E501
            'last_updated_date': (int,),  # noqa: E501
            'market_segment': (str,),  # noqa: E501
            'last_transaction_date': (int,),  # noqa: E501
            'oldest_transaction_date': (int,),  # noqa: E501
            'detail': (CustomerAccountDetail,),  # noqa: E501
            'position': ([CustomerAccountPosition],),  # noqa: E501
            'display_position': (int,),  # noqa: E501
            'parent_account': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'number': 'number',  # noqa: E501
        'account_number_display': 'accountNumberDisplay',  # noqa: E501
        'name': 'name',  # noqa: E501
        'type': 'type',  # noqa: E501
        'status': 'status',  # noqa: E501
        'customer_id': 'customerId',  # noqa: E501
        'institution_id': 'institutionId',  # noqa: E501
        'created_date': 'createdDate',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'institution_login_id': 'institutionLoginId',  # noqa: E501
        'real_account_number_last4': 'realAccountNumberLast4',  # noqa: E501
        'balance': 'balance',  # noqa: E501
        'aggregation_status_code': 'aggregationStatusCode',  # noqa: E501
        'balance_date': 'balanceDate',  # noqa: E501
        'aggregation_success_date': 'aggregationSuccessDate',  # noqa: E501
        'aggregation_attempt_date': 'aggregationAttemptDate',  # noqa: E501
        'last_updated_date': 'lastUpdatedDate',  # noqa: E501
        'market_segment': 'marketSegment',  # noqa: E501
        'last_transaction_date': 'lastTransactionDate',  # noqa: E501
        'oldest_transaction_date': 'oldestTransactionDate',  # noqa: E501
        'detail': 'detail',  # noqa: E501
        'position': 'position',  # noqa: E501
        'display_position': 'displayPosition',  # noqa: E501
        'parent_account': 'parentAccount',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, id, number, account_number_display, name, type, status, customer_id, institution_id, created_date, currency, institution_login_id, *args, **kwargs):  # noqa: E501
        """CustomerAccount - a model defined in OpenAPI

        Args:
            id (str): An account ID
            number (str): The account number from the institution
            account_number_display (str): The account number from a financial institution in truncated format:    * Last four digits: \"1234\"    * Last four digits with suffix: \"1234-9\"    * Full value for string accounts: \"john@gmail.com\" example: '1234-9'
            name (str): The account name from the institution
            type (str): The list of supported account types. * \"checking\": Standard checking * \"savings\": Standard savings * \"cd\": Certificates of deposit * \"moneyMarket\": Money Market * \"creditCard\": Standard credit cards * \"lineOfCredit\": Home equity, line of credit * \"investment\": Generic investment (no details) * \"investmentTaxDeferred\": Generic tax-advantaged investment (no details) * \"employeeStockPurchasePlan\": ESPP, Employee Stock Ownership Plans (ESOP), Stock Purchase Plans * \"ira\": Individual Retirement Account (not Rollover or Roth) * \"401k\": 401K Plan * \"roth\": Roth IRA, Roth 401K * \"403b\": 403B Plan * \"529plan\": 529 Plan (True value is 529) * \"rollover\": Rollover IRA * \"ugma\": Uniform Gifts to Minors Act * \"utma\": Uniform Transfers to Minors Act * \"keogh\": Keogh Plan * \"457plan\": 457 Plan (True value is 457) * \"401a\": 401A Plan * \"brokerageAccount\": Brokerage Account * \"educationSavings\": Education Savings Account that is not a 529 * \"healthSavingsAccount\": HSA (Health Savings Accounts) * \"pension\": Pension * \"profitSharingPlan\": Profit Sharing Plan * \"roth401k\": Roth 401K * \"sepIRA\": Simplified Employee Pension IRA * \"simpleIRA\": Simple IRA * \"thriftSavingsPlan\": Thrift Savings Plan * \"variableAnnuity\": Variable Annuity * \"cryptocurrency\": Cryptocurrency Wallet, Cryptocurrency Account * \"mortgage\": Standard Mortgages * \"loan\": Auto loans, equity loans, other loans * \"studentLoan\": Student Loan * \"studentLoanGroup\": Student Loan Group * \"studentLoanAccount\": Student Loan Account
            status (str): \"pending\" during account discovery, always \"active\" following   successful account activation
            customer_id (str): A customer ID. See Add Customer API for how to create a customer ID.
            institution_id (str): The ID of a financial institution
            created_date (int): A timestamp showing when the account was added to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
            currency (str): A currency code
            institution_login_id (int): An institution login ID (from the account record), represented as a number

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            real_account_number_last4 (str): The last 4 digits of the ACH account number. [optional]  # noqa: E501
            balance (float): The cleared balance of the account as of `balanceDate`. [optional]  # noqa: E501
            aggregation_status_code (int): The status of the most recent aggregation attempt (see [Aggregation Status Codes](https://developer.mastercard.com/open-banking-us/documentation/products/manage/account-aggregation/#aggregation-status-codes)). Won't be present until you have run your first aggregation for the account.. [optional]  # noqa: E501
            balance_date (int): A timestamp showing when the balance was captured. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            aggregation_success_date (int): A timestamp showing the last successful aggregation of the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            aggregation_attempt_date (int): A timestamp showing the last aggregation attempt, whether successful or not. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            last_updated_date (int): A timestamp showing when the account was last modified to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            market_segment (str): The market segment of the account. Possible values: personal, business. [optional]  # noqa: E501
            last_transaction_date (int): The date of the latest transaction on the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            oldest_transaction_date (int): The date of the oldest transaction in the transactions for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            detail (CustomerAccountDetail): [optional]  # noqa: E501
            position ([CustomerAccountPosition]): Investment holdings. [optional]  # noqa: E501
            display_position (int): Display position of the account at the financial institution, \"1\"     being the top listed account. [optional]  # noqa: E501
            parent_account (str): The assigned account ID for the account one level higher in the student loan account hierarchy. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.number = number
        self.account_number_display = account_number_display
        self.name = name
        self.type = type
        self.status = status
        self.customer_id = customer_id
        self.institution_id = institution_id
        self.created_date = created_date
        self.currency = currency
        self.institution_login_id = institution_login_id
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, id, number, account_number_display, name, type, status, customer_id, institution_id, created_date, currency, institution_login_id, *args, **kwargs):  # noqa: E501
        """CustomerAccount - a model defined in OpenAPI

        Args:
            id (str): An account ID
            number (str): The account number from the institution
            account_number_display (str): The account number from a financial institution in truncated format:    * Last four digits: \"1234\"    * Last four digits with suffix: \"1234-9\"    * Full value for string accounts: \"john@gmail.com\" example: '1234-9'
            name (str): The account name from the institution
            type (str): The list of supported account types. * \"checking\": Standard checking * \"savings\": Standard savings * \"cd\": Certificates of deposit * \"moneyMarket\": Money Market * \"creditCard\": Standard credit cards * \"lineOfCredit\": Home equity, line of credit * \"investment\": Generic investment (no details) * \"investmentTaxDeferred\": Generic tax-advantaged investment (no details) * \"employeeStockPurchasePlan\": ESPP, Employee Stock Ownership Plans (ESOP), Stock Purchase Plans * \"ira\": Individual Retirement Account (not Rollover or Roth) * \"401k\": 401K Plan * \"roth\": Roth IRA, Roth 401K * \"403b\": 403B Plan * \"529plan\": 529 Plan (True value is 529) * \"rollover\": Rollover IRA * \"ugma\": Uniform Gifts to Minors Act * \"utma\": Uniform Transfers to Minors Act * \"keogh\": Keogh Plan * \"457plan\": 457 Plan (True value is 457) * \"401a\": 401A Plan * \"brokerageAccount\": Brokerage Account * \"educationSavings\": Education Savings Account that is not a 529 * \"healthSavingsAccount\": HSA (Health Savings Accounts) * \"pension\": Pension * \"profitSharingPlan\": Profit Sharing Plan * \"roth401k\": Roth 401K * \"sepIRA\": Simplified Employee Pension IRA * \"simpleIRA\": Simple IRA * \"thriftSavingsPlan\": Thrift Savings Plan * \"variableAnnuity\": Variable Annuity * \"cryptocurrency\": Cryptocurrency Wallet, Cryptocurrency Account * \"mortgage\": Standard Mortgages * \"loan\": Auto loans, equity loans, other loans * \"studentLoan\": Student Loan * \"studentLoanGroup\": Student Loan Group * \"studentLoanAccount\": Student Loan Account
            status (str): \"pending\" during account discovery, always \"active\" following   successful account activation
            customer_id (str): A customer ID. See Add Customer API for how to create a customer ID.
            institution_id (str): The ID of a financial institution
            created_date (int): A timestamp showing when the account was added to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
            currency (str): A currency code
            institution_login_id (int): An institution login ID (from the account record), represented as a number

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            real_account_number_last4 (str): The last 4 digits of the ACH account number. [optional]  # noqa: E501
            balance (float): The cleared balance of the account as of `balanceDate`. [optional]  # noqa: E501
            aggregation_status_code (int): The status of the most recent aggregation attempt (see [Aggregation Status Codes](https://developer.mastercard.com/open-banking-us/documentation/products/manage/account-aggregation/#aggregation-status-codes)). Won't be present until you have run your first aggregation for the account.. [optional]  # noqa: E501
            balance_date (int): A timestamp showing when the balance was captured. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            aggregation_success_date (int): A timestamp showing the last successful aggregation of the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            aggregation_attempt_date (int): A timestamp showing the last aggregation attempt, whether successful or not. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            last_updated_date (int): A timestamp showing when the account was last modified to the system. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            market_segment (str): The market segment of the account. Possible values: personal, business. [optional]  # noqa: E501
            last_transaction_date (int): The date of the latest transaction on the account. This will not be present until you have run your first aggregation for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            oldest_transaction_date (int): The date of the oldest transaction in the transactions for the account. A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).. [optional]  # noqa: E501
            detail (CustomerAccountDetail): [optional]  # noqa: E501
            position ([CustomerAccountPosition]): Investment holdings. [optional]  # noqa: E501
            display_position (int): Display position of the account at the financial institution, \"1\"     being the top listed account. [optional]  # noqa: E501
            parent_account (str): The assigned account ID for the account one level higher in the student loan account hierarchy. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.id = id
        self.number = number
        self.account_number_display = account_number_display
        self.name = name
        self.type = type
        self.status = status
        self.customer_id = customer_id
        self.institution_id = institution_id
        self.created_date = created_date
        self.currency = currency
        self.institution_login_id = institution_login_id
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
