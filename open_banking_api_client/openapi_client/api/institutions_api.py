"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.branding_wrapper import BrandingWrapper
from openapi_client.model.certified_institutions import CertifiedInstitutions
from openapi_client.model.error_message import ErrorMessage
from openapi_client.model.institution_wrapper import InstitutionWrapper
from openapi_client.model.institutions import Institutions


class InstitutionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_certified_institutions_endpoint = _Endpoint(
            settings={
                'response_type': (CertifiedInstitutions,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/institution/v2/certifiedInstitutions',
                'operation_id': 'get_certified_institutions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'search',
                    'start',
                    'limit',
                    'type',
                    'supported_countries',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search':
                        (str,),
                    'start':
                        (int,),
                    'limit':
                        (int,),
                    'type':
                        (str,),
                    'supported_countries':
                        ([str],),
                },
                'attribute_map': {
                    'search': 'search',
                    'start': 'start',
                    'limit': 'limit',
                    'type': 'type',
                    'supported_countries': 'supportedCountries',
                },
                'location_map': {
                    'search': 'query',
                    'start': 'query',
                    'limit': 'query',
                    'type': 'query',
                    'supported_countries': 'query',
                },
                'collection_format_map': {
                    'supported_countries': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_certified_institutions_with_rssd_endpoint = _Endpoint(
            settings={
                'response_type': (CertifiedInstitutions,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/institution/v2/certifiedInstitutions/rssd',
                'operation_id': 'get_certified_institutions_with_rssd',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'search',
                    'start',
                    'limit',
                    'type',
                    'supported_countries',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search':
                        (str,),
                    'start':
                        (int,),
                    'limit':
                        (int,),
                    'type':
                        (str,),
                    'supported_countries':
                        ([str],),
                },
                'attribute_map': {
                    'search': 'search',
                    'start': 'start',
                    'limit': 'limit',
                    'type': 'type',
                    'supported_countries': 'supportedCountries',
                },
                'location_map': {
                    'search': 'query',
                    'start': 'query',
                    'limit': 'query',
                    'type': 'query',
                    'supported_countries': 'query',
                },
                'collection_format_map': {
                    'supported_countries': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_institution_endpoint = _Endpoint(
            settings={
                'response_type': (InstitutionWrapper,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/institution/v2/institutions/{institutionId}',
                'operation_id': 'get_institution',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'institution_id',
                ],
                'required': [
                    'institution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'institution_id':
                        (int,),
                },
                'attribute_map': {
                    'institution_id': 'institutionId',
                },
                'location_map': {
                    'institution_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_institution_branding_endpoint = _Endpoint(
            settings={
                'response_type': (BrandingWrapper,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/institution/v2/institutions/{institutionId}/branding',
                'operation_id': 'get_institution_branding',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'institution_id',
                ],
                'required': [
                    'institution_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'institution_id':
                        (int,),
                },
                'attribute_map': {
                    'institution_id': 'institutionId',
                },
                'location_map': {
                    'institution_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_institutions_endpoint = _Endpoint(
            settings={
                'response_type': (Institutions,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/institution/v2/institutions',
                'operation_id': 'get_institutions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'search',
                    'start',
                    'limit',
                    'type',
                    'supported_countries',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'limit',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                        'inclusive_maximum': 1000,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search':
                        (str,),
                    'start':
                        (int,),
                    'limit':
                        (int,),
                    'type':
                        (str,),
                    'supported_countries':
                        ([str],),
                },
                'attribute_map': {
                    'search': 'search',
                    'start': 'start',
                    'limit': 'limit',
                    'type': 'type',
                    'supported_countries': 'supportedCountries',
                },
                'location_map': {
                    'search': 'query',
                    'start': 'query',
                    'limit': 'query',
                    'type': 'query',
                    'supported_countries': 'query',
                },
                'collection_format_map': {
                    'supported_countries': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_certified_institutions(
        self,
        **kwargs
    ):
        """Get Certified Institutions  # noqa: E501

        Search for financial institutions by certified product.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_certified_institutions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            search (str): Search term (financial institution `name` field). Leave empty for all FIs.. [optional]
            start (int): Index of the page of results to return. [optional] if omitted the server will use the default value of 1
            limit (int): Maximum number of results per page. [optional] if omitted the server will use the default value of 25
            type (str): A product type: \"transAgg\", \"ach\", \"stateAgg\", \"voi\", \"voa\", \"aha\", \"availBalance\", \"accountOwner\". [optional]
            supported_countries ([str]): A list of country codes, '*' for all countries.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CertifiedInstitutions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_certified_institutions_endpoint.call_with_http_info(**kwargs)

    def get_certified_institutions_with_rssd(
        self,
        **kwargs
    ):
        """Get Certified Institutions With RSSD  # noqa: E501

        Search for certified financial institutions w/RSSD.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_certified_institutions_with_rssd(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            search (str): Search term (financial institution `name` field). Leave empty for all FIs.. [optional]
            start (int): Index of the page of results to return. [optional] if omitted the server will use the default value of 1
            limit (int): Maximum number of results per page. [optional] if omitted the server will use the default value of 25
            type (str): A product type: \"transAgg\", \"ach\", \"stateAgg\", \"voi\", \"voa\", \"aha\", \"availBalance\", \"accountOwner\". [optional]
            supported_countries ([str]): A list of country codes, '*' for all countries.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CertifiedInstitutions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_certified_institutions_with_rssd_endpoint.call_with_http_info(**kwargs)

    def get_institution(
        self,
        institution_id,
        **kwargs
    ):
        """Get Institution by ID  # noqa: E501

        Get financial institution details by ID.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_institution(institution_id, async_req=True)
        >>> result = thread.get()

        Args:
            institution_id (int): The institution ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InstitutionWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['institution_id'] = \
            institution_id
        return self.get_institution_endpoint.call_with_http_info(**kwargs)

    def get_institution_branding(
        self,
        institution_id,
        **kwargs
    ):
        """Get Institution Branding by ID  # noqa: E501

        Return the branding information for a financial institution.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_institution_branding(institution_id, async_req=True)
        >>> result = thread.get()

        Args:
            institution_id (int): The institution ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            BrandingWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['institution_id'] = \
            institution_id
        return self.get_institution_branding_endpoint.call_with_http_info(**kwargs)

    def get_institutions(
        self,
        **kwargs
    ):
        """Get Institutions  # noqa: E501

        Search for financial institutions.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_institutions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            search (str): Search term (financial institution `name` field). Leave empty for all FIs.. [optional]
            start (int): Index of the page of results to return. [optional] if omitted the server will use the default value of 1
            limit (int): Maximum number of results per page. [optional] if omitted the server will use the default value of 25
            type (str): A product type: \"transAgg\", \"ach\", \"stateAgg\", \"voi\", \"voa\", \"aha\", \"availBalance\", \"accountOwner\". [optional]
            supported_countries ([str]): A list of country codes, '*' for all countries.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Institutions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_institutions_endpoint.call_with_http_info(**kwargs)

