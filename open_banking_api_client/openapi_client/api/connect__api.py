"""
    Open Banking

    OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.  # noqa: E501

    The version of the OpenAPI document: 1.13.7
    Contact: apisupport@mastercard.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.connect_email_parameters import ConnectEmailParameters
from openapi_client.model.connect_email_url import ConnectEmailUrl
from openapi_client.model.connect_joint_borrower_email_parameters import ConnectJointBorrowerEmailParameters
from openapi_client.model.connect_joint_borrower_parameters import ConnectJointBorrowerParameters
from openapi_client.model.connect_parameters import ConnectParameters
from openapi_client.model.connect_url import ConnectUrl
from openapi_client.model.error_message import ErrorMessage
from openapi_client.model.fix_connect_parameters import FixConnectParameters
from openapi_client.model.lite_connect_parameters import LiteConnectParameters
from openapi_client.model.micro_entry_verify_request_parameter import MicroEntryVerifyRequestParameter


class ConnectApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.generate_connect_url_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectUrl,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/connect/v2/generate',
                'operation_id': 'generate_connect_url',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'connect_parameters',
                ],
                'required': [
                    'connect_parameters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'connect_parameters':
                        (ConnectParameters,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'connect_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.generate_fix_connect_url_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectUrl,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/connect/v2/generate/fix',
                'operation_id': 'generate_fix_connect_url',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fix_connect_parameters',
                ],
                'required': [
                    'fix_connect_parameters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'fix_connect_parameters':
                        (FixConnectParameters,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'fix_connect_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.generate_joint_borrower_connect_url_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectUrl,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/connect/v2/generate/jointBorrower',
                'operation_id': 'generate_joint_borrower_connect_url',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'connect_joint_borrower_parameters',
                ],
                'required': [
                    'connect_joint_borrower_parameters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'connect_joint_borrower_parameters':
                        (ConnectJointBorrowerParameters,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'connect_joint_borrower_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.generate_lite_connect_url_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectUrl,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/connect/v2/generate/lite',
                'operation_id': 'generate_lite_connect_url',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'lite_connect_parameters',
                ],
                'required': [
                    'lite_connect_parameters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lite_connect_parameters':
                        (LiteConnectParameters,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'lite_connect_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_connect_email_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectEmailUrl,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/connect/v2/send/email',
                'operation_id': 'send_connect_email',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'connect_email_parameters',
                ],
                'required': [
                    'connect_email_parameters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'connect_email_parameters':
                        (ConnectEmailParameters,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'connect_email_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.send_joint_borrower_connect_email_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectEmailUrl,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/connect/v2/send/email/jointBorrower',
                'operation_id': 'send_joint_borrower_connect_email',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'connect_joint_borrower_email_parameters',
                ],
                'required': [
                    'connect_joint_borrower_email_parameters',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'connect_joint_borrower_email_parameters':
                        (ConnectJointBorrowerEmailParameters,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'connect_joint_borrower_email_parameters': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.verify_micro_entry_microdeposit_endpoint = _Endpoint(
            settings={
                'response_type': (ConnectUrl,),
                'auth': [
                    'FinicityAppKey',
                    'FinicityAppToken'
                ],
                'endpoint_path': '/connect/v2/generate/microentry/verify',
                'operation_id': 'verify_micro_entry_microdeposit',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'micro_entry_verify_request_parameter',
                ],
                'required': [
                    'micro_entry_verify_request_parameter',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'micro_entry_verify_request_parameter':
                        (MicroEntryVerifyRequestParameter,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'micro_entry_verify_request_parameter': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def generate_connect_url(
        self,
        connect_parameters,
        **kwargs
    ):
        """Generate Connect URL  # noqa: E501

        Generate a Connect 2.0 URL link to add within your own applications.  In option, use the `experience` parameter to call Connect (per session) in the body of the request. Configure the `experience` parameter to change the brand color, logo, icon, which credit decisioning report to generate when the Connect application completes, and more.  Note: contact your Sales Account Team to set up the `experience` parameter.  MVS Developers: You can pre-populate the consumer's SSN on the \"Find employment records\" page at the beginning of the MVS payroll app. Pass the SSN value for the consumer in the body of the request call.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_connect_url(connect_parameters, async_req=True)
        >>> result = thread.get()

        Args:
            connect_parameters (ConnectParameters):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectUrl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['connect_parameters'] = \
            connect_parameters
        return self.generate_connect_url_endpoint.call_with_http_info(**kwargs)

    def generate_fix_connect_url(
        self,
        fix_connect_parameters,
        **kwargs
    ):
        """Generate Fix Connect URL  # noqa: E501

        Use the Connect Fix API when the following conditions occur: * The connection to the user's financial institution is lost * The user's credentials were updated (for any number of reasons) * The user's MFA challenge has expired  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_fix_connect_url(fix_connect_parameters, async_req=True)
        >>> result = thread.get()

        Args:
            fix_connect_parameters (FixConnectParameters):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectUrl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['fix_connect_parameters'] = \
            fix_connect_parameters
        return self.generate_fix_connect_url_endpoint.call_with_http_info(**kwargs)

    def generate_joint_borrower_connect_url(
        self,
        connect_joint_borrower_parameters,
        **kwargs
    ):
        """Generate Connect URL - Joint Borrower  # noqa: E501

        Same as Connect Full (`POST /connect/v2/generate`) but for joint borrowers.  MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_joint_borrower_connect_url(connect_joint_borrower_parameters, async_req=True)
        >>> result = thread.get()

        Args:
            connect_joint_borrower_parameters (ConnectJointBorrowerParameters):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectUrl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['connect_joint_borrower_parameters'] = \
            connect_joint_borrower_parameters
        return self.generate_joint_borrower_connect_url_endpoint.call_with_http_info(**kwargs)

    def generate_lite_connect_url(
        self,
        lite_connect_parameters,
        **kwargs
    ):
        """Generate Lite Connect URL  # noqa: E501

        Connect Lite is a variation of Connect Full (`POST /connect/v2/generate`), which has a limited set of features. * Sign in, user's credentials, and Multi-Factor Authentication (MFA) * No user account management  The Connect Web SDK isn't a requirement when using Connect lite. However, if you want to use the SDK events, routes, and user events, then you must integrate with the Connect Web SDK.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_lite_connect_url(lite_connect_parameters, async_req=True)
        >>> result = thread.get()

        Args:
            lite_connect_parameters (LiteConnectParameters):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectUrl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['lite_connect_parameters'] = \
            lite_connect_parameters
        return self.generate_lite_connect_url_endpoint.call_with_http_info(**kwargs)

    def send_connect_email(
        self,
        connect_email_parameters,
        **kwargs
    ):
        """Send Connect Email  # noqa: E501

        Same as Connect Full (`POST /connect/v2/generate`) but send a Connect email to a consumer.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_connect_email(connect_email_parameters, async_req=True)
        >>> result = thread.get()

        Args:
            connect_email_parameters (ConnectEmailParameters):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectEmailUrl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['connect_email_parameters'] = \
            connect_email_parameters
        return self.send_connect_email_endpoint.call_with_http_info(**kwargs)

    def send_joint_borrower_connect_email(
        self,
        connect_joint_borrower_email_parameters,
        **kwargs
    ):
        """Send Connect Email - Joint Borrower  # noqa: E501

        Same as Connect Joint Borrower (`POST /connect/v2/generate/jointBorrower`) but send a Connect email  to at least one of the joint borrower's email addresses.   When the consumer opens the email, MVS prompts both the primary and joint borrower to enter each of their financial, payroll, and paystub information in the same Connect session.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.send_joint_borrower_connect_email(connect_joint_borrower_email_parameters, async_req=True)
        >>> result = thread.get()

        Args:
            connect_joint_borrower_email_parameters (ConnectJointBorrowerEmailParameters):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectEmailUrl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['connect_joint_borrower_email_parameters'] = \
            connect_joint_borrower_email_parameters
        return self.send_joint_borrower_connect_email_endpoint.call_with_http_info(**kwargs)

    def verify_micro_entry_microdeposit(
        self,
        micro_entry_verify_request_parameter,
        **kwargs
    ):
        """Account Validation Assistant User verification of microdeposits  # noqa: E501

        The UI re-engages the consumer to enter two microdeposit amounts found in their account and validates them.  _Supported regions_: ![🇺🇸](https://flagcdn.com/20x15/us.png)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.verify_micro_entry_microdeposit(micro_entry_verify_request_parameter, async_req=True)
        >>> result = thread.get()

        Args:
            micro_entry_verify_request_parameter (MicroEntryVerifyRequestParameter):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ConnectUrl
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['micro_entry_verify_request_parameter'] = \
            micro_entry_verify_request_parameter
        return self.verify_micro_entry_microdeposit_endpoint.call_with_http_info(**kwargs)

